{"version":3,"sources":["index.js"],"names":["courseList1","name","content","id","difficulty","credits","category","courseList2","courseList3","courseList4","courseList5","courseList6","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","borderRadius","getListStyle","isDraggingOver","background","width","App","state","creditTotals","firstSemester","secondSemester","thirdSemester","fourthSemester","fifthSemester","sixthSemester","id2List","getList","onDragEnd","items","setState","calculateCourseCreditTotal","this","Object","keys","forEach","key","courseCredits","map","course","length","totalCourseCreditsForTerm","reduce","n","val","Fragment","className","provided","snapshot","ref","innerRef","style","item","draggableId","toString","join","draggableProps","dragHandleProps","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1073f276.chunk.js","sourcesContent":["import \"./styles.css\";\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// course lists\nconst courseList1 = [\n  {\n    name: \"IDSN530\",\n    content: \"Technology Essentials\",\n    id: 530,\n    difficulty: 5,\n    credits: 3,\n    category: \"essentials\"\n  },\n  {\n    name: \"IDSN540\",\n    content: \"Processes & Perspectives\",\n    id: 540,\n    difficulty: 4,\n    credits: 4,\n    category: \"core\"\n  },\n  {\n    name: \"IDSN510\",\n    content: \"Integrated Practices Residential\",\n    id: 510,\n    difficulty: 5,\n    credits: 2,\n    category: \"residential\"\n  }\n];\n\nconst courseList2 = [\n  {\n    name: \"IDSN525\",\n    content: \"Business Essentials\",\n    id: 525,\n    difficulty: 3,\n    credits: 3,\n    category: \"essentials\"\n  },\n  {\n    name: \"IDSN560\",\n    content: \"Narrative and Storytelling\",\n    id: 560,\n    difficulty: 5,\n    credits: 4,\n    category: \"core\"\n  }\n];\n\nconst courseList3 = [\n  {\n    name: \"IDSNXXX\",\n    content: \"Elective Credit\",\n    id: 591,\n    difficulty: 0,\n    credits: 3,\n    category: \"elective\"\n  },\n  {\n    name: \"IDSN550\",\n    content: \"Opportunity and Uncertainty\",\n    id: 550,\n    difficulty: 4,\n    credits: 4,\n    category: \"core\"\n  },\n  {\n    name: \"IDSN545\",\n    content: \"Integrative Project\",\n    id: 545,\n    difficulty: 3,\n    credits: 2,\n    category: \"lab\"\n  }\n];\n\nconst courseList4 = [\n  {\n    name: \"IDSNXXX\",\n    content: \"Elective Credit\",\n    id: 592,\n    difficulty: 0,\n    credits: 3,\n    category: \"elective\"\n  },\n  {\n    name: \"IDSNXXX\",\n    content: \"Elective Credit\",\n    id: 593,\n    difficulty: 0,\n    credits: 3,\n    category: \"elective\"\n  },\n  {\n    name: \"IDSN515\",\n    content: \"Professional Practices Residential\",\n    id: 515,\n    difficulty: 5,\n    credits: 2,\n    category: \"residential\"\n  }\n];\n\nconst courseList5 = [\n  {\n    name: \"IDSNXXX\",\n    content: \"Elective Credit\",\n    id: 594,\n    difficulty: 0,\n    credits: 3,\n    category: \"elective\"\n  },\n  {\n    name: \"IDSN585\",\n    content: \"Capstone\",\n    id: 585,\n    difficulty: 0,\n    credits: 2,\n    category: \"capstone\"\n  }\n];\n\nconst courseList6 = [\n  {\n    name: \"IDSN520\",\n    content: \"Design Essentials\",\n    id: 520,\n    difficulty: 3,\n    credits: 3,\n    category: \"essentials\"\n  },\n  {\n    name: \"IDSNXXX\",\n    content: \"Elective Credit\",\n    id: 595,\n    difficulty: 0,\n    credits: 2,\n    category: \"elective\"\n  }\n];\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  // console.log(list);\n  // console.log(startIndex);\n  // console.log(endIndex);\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  borderRadius: \"4px\",\n\n  // change background colour if dragging\n  // background: isDragging ? \"#333\" : \"#555\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"#444\" : \"#222\",\n  borderRadius: \"8px\",\n  padding: grid,\n  margin: \"2px\",\n  width: 250\n});\n\n// fetch items in each column\nclass App extends Component {\n  state = {\n    creditTotals: {\n      firstSemester: 0,\n      secondSemester: 0,\n      thirdSemester: 0,\n      fourthSemester: 0,\n      fifthSemester: 0\n    },\n    firstSemester: courseList1,\n    secondSemester: courseList2,\n    thirdSemester: courseList3,\n    fourthSemester: courseList4,\n    fifthSemester: courseList5,\n    sixthSemester: courseList6\n  };\n\n  componentDidMount() {\n    this.calculateCourseCreditTotal(this.state);\n  }\n\n  /** Convert IDs to a list */\n\n  id2List = {\n    firstSemester: \"firstSemester\",\n    secondSemester: \"secondSemester\",\n    thirdSemester: \"thirdSemester\",\n    fourthSemester: \"fourthSemester\",\n    fifthSemester: \"fifthSemester\",\n    sixthSemester: \"sixthSemester\"\n  };\n\n  calculateCourseCreditTotal() {\n    // Calculate the total here and return it.\n    // console.log(\"creds\", this.state.credits);\n\n    let state = {\n      creditTotals: {}\n    };\n\n    Object.keys(this.id2List).forEach((key, index) => {\n      let term = this.state[key];\n\n      //console.log(`term ${index + 1}`, term);\n\n      let courseCredits = term.map((course) => {\n        return course.credits;\n      });\n\n      if (!courseCredits.length) {\n        state.creditTotals[key] = 0;\n        return key;\n      }\n\n      // need to check for null results from reduce here\n      let totalCourseCreditsForTerm = courseCredits.reduce((n, val) => {\n        return n + val;\n      });\n\n      //console.log(\"total\", totalCourseCreditsForTerm);\n\n      state.creditTotals[key] = totalCourseCreditsForTerm;\n\n      return key;\n    });\n\n    // console.log(state);\n\n    this.setState(state);\n  }\n\n  getList = (id) => {\n    // console.log(\"idList\", this.id2List);\n    // console.log(\"state\", this.state);\n    // console.log(\"id\", id);\n    // console.log(\"list\", this.state[this.id2List[id]]);\n    return this.state[this.id2List[id]];\n  };\n\n  onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // console.log('end', source, destination);\n    // console.log(\"source\", source);\n    // console.log(\"dest\", destination);\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      // console.log(\"items\", items);\n\n      // Set state\n      let state = { items };\n      state[source.droppableId] = items;\n\n      this.setState(state);\n    } else {\n      //console.log(\"source\", source.droppableId);\n      //console.log(\"destination\", destination.droppableId);\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      //console.log(\"result\", result);\n      this.setState(result, () => this.calculateCourseCreditTotal());\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"allBlocks\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"firstSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Term 1</div>\n                  {this.state.firstSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  <div className=\"totalCredits\">\n                    {this.state.creditTotals.firstSemester} Credits\n                  </div>\n                  <div className=\"totalCost\">\n                    {(\n                      this.state.creditTotals.firstSemester * 2035\n                    ).toLocaleString(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    })}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n            <Droppable droppableId=\"secondSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Term 2</div>\n                  {this.state.secondSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  <div className=\"totalCredits\">\n                    {this.state.creditTotals.secondSemester} Credits\n                  </div>\n                  <div className=\"totalCost\">\n                    {(\n                      this.state.creditTotals.secondSemester * 2035\n                    ).toLocaleString(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    })}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n            <Droppable droppableId=\"thirdSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Term 3</div>\n                  {this.state.thirdSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  <div className=\"totalCredits\">\n                    {this.state.creditTotals.thirdSemester} Credits\n                  </div>\n                  <div className=\"totalCost\">\n                    {(\n                      this.state.creditTotals.thirdSemester * 2035\n                    ).toLocaleString(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    })}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n            <Droppable droppableId=\"fourthSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Term 4</div>\n                  {this.state.fourthSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  <div className=\"totalCredits\">\n                    {this.state.creditTotals.fourthSemester} Credits\n                  </div>\n                  <div className=\"totalCost\">\n                    {(\n                      this.state.creditTotals.fourthSemester * 2035\n                    ).toLocaleString(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    })}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n            <Droppable droppableId=\"fifthSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Term 5</div>\n                  {this.state.fifthSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  <div className=\"totalCredits\">\n                    {this.state.creditTotals.fifthSemester} Credits\n                  </div>\n                  <div className=\"totalCost\">\n                    {(\n                      this.state.creditTotals.fifthSemester * 2035\n                    ).toLocaleString(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"USD\",\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    })}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n            <Droppable droppableId=\"sixthSemester\">\n              {(provided, snapshot) => (\n                <div\n                  className=\"semesterBlock semesterBin\"\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  <div className=\"semesterName\">Bin</div>\n                  {this.state.sixthSemester.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          className={[\"courseBlock\", item.category].join(\" \")}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <b>{item.name}</b>\n                          &nbsp;\n                          <span className=\"className\">{item.content}</span>\n                          <span className=\"creditNum\">\n                            {item.credits} credits • {item.difficulty}/5\n                            difficulty\n                          </span>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <div className=\"course-credit-total\">\n          Degree Credit Total:{\" \"}\n          {this.state.creditTotals.firstSemester +\n            this.state.creditTotals.secondSemester +\n            this.state.creditTotals.thirdSemester +\n            this.state.creditTotals.fourthSemester +\n            this.state.creditTotals.fifthSemester}\n          /38\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n// Put the things into the DOM!\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}